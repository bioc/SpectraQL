% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Spectra.R
\name{query,Spectra-method}
\alias{query,Spectra-method}
\alias{query}
\alias{The}
\alias{`query`}
\alias{function}
\alias{allows}
\alias{to}
\alias{and}
\alias{subset/filter}
\alias{a}
\alias{`Spectra`}
\alias{object}
\alias{using}
\alias{Mass}
\alias{Spec}
\alias{Query}
\alias{Language}
\alias{[MassQL](https://mwang87.github.io/MassQueryLanguage_Documentation/)}
\alias{expression.}
\alias{A}
\alias{MassQL}
\alias{is}
\alias{expressed}
\alias{in}
\alias{the}
\alias{form}
\alias{`QUERY}
\alias{<type}
\alias{of}
\alias{data>}
\alias{WHERE}
\alias{<condition>}
\alias{AND}
\alias{FILTER}
\alias{<filter>}
\alias{<filter>`,}
\alias{multiple}
\alias{*conditions*}
\alias{*filters*}
\alias{can}
\alias{be}
\alias{combined}
\alias{with}
\alias{logical}
\alias{*and*}
\alias{operations.}
\alias{In}
\alias{definition,}
\alias{subsets}
\alias{data}
\alias{specific}
\alias{spectra}
\alias{while}
\alias{*filter*}
\alias{restricts}
\alias{within}
\alias{spectrum.}
\alias{Note}
\alias{that}
\alias{at}
\alias{present}
\alias{are}
\alias{not}
\alias{supported.}
\alias{Also}
\alias{note}
\alias{queries}
\alias{interpreted}
\alias{case}
\alias{insensitive}
\alias{`SpectraQL`.}
\alias{See}
\alias{also}
\alias{package}
\alias{vignette}
\alias{for}
\alias{more}
\alias{details.}
\title{Query a Spectra object using MassQL}
\usage{
\S4method{query}{Spectra}(x, query = character(), ...)
}
\arguments{
\item{x}{The \code{Spectra} object to query.}

\item{query}{\code{character(1)} with the MassQL query.}

\item{...}{currently ignored.}
}
\value{
Depending on the \verb{<type of data>} part of the MassQL query.
}
\description{
Query a Spectra object using MassQL
}
\section{Type of data}{


The \verb{<type of data>} allows to define which data should be extracted from
the selected spectra. MassQL defines \emph{type of data} being \code{MS1DATA} or
\code{MS2DATA} to retrieve data from MS1 or MS2 scans. By default peak data will
be returned, but in addition, MASSQL defines additional functions that can
be applied to modify the data or select different data to be returned. In
addition \code{SpectraQL} defines the special type of data \code{*} which will return
the results as a \code{Spectra} object. \code{SpectraQL} supports:
\itemize{
\item \code{*}: select all data and return the data subset as a \code{\link[=Spectra]{Spectra()}} object.
\item \code{MS1DATA}: return the \code{\link[=peaksData]{peaksData()}} from all selected \strong{MS1} spectra,
i.e. a \code{list} with two column matrices with the peaks' m/z and intensity
values.
\item \code{MS2DATA}: return the \code{\link[=peaksData]{peaksData()}} from all selected \strong{MS2} spectra,
i.e. a \code{list} with two column matrices with the peaks' m/z and intensity
values.
\item \code{scaninfo(MS1DATA)}, \code{scaninfo(MS2DATA)}: return the \code{\link[=spectraData]{spectraData()}} of all
selected spectra.
\item \code{scansum(MS1DATA)}, \code{scansum(MS2DATA)}: sum of the peak intensities of
the selected spectra (TIC).
}
}

\section{Conditions}{


Conditions define to which spectra the data set should be subsetted. Several
conditions can be combined with \code{"and"} (case insensitive). The syntax for a
condition is \verb{<condition> = <value>}, e.g. \code{MS2PROD = 144.1}. Such conditions
can be further refined by additional expressions that allow for example to
define acceptable tolerances for m/z differences. \code{SpectraQL} supports (case
insensitive):
\itemize{
\item \code{RTMIN}: minimum retention time (in \strong{seconds}).
\item \code{RTMAX}: maximum retention time (in \strong{seconds}).
\item \code{SCANMIN}: the minimum scan number (acquisition number).
\item \code{SCANMAX}: the maximum scan number (acquisition number).
\item \code{CHARGE}: the charge for MS2 spectra.
\item \code{POLARITY}: the polarity of the spectra (can be \code{"positive"}, \code{"negative"},
\code{"pos"} or \code{"neg"}, case insensitive).
\item \code{MS2PROD} or MS2MZ`: allows to select MS2 spectra that contain a peak with
particular m/z value(s). See below for examples.
\item \code{MS2PREC}: allows to select MS2 spectra with the defined precursor m/z
value(s). See below for examples.
\item \code{MS1MZ}: allows to select MS1 spectra containing peak(s) with the defined
m/z value(s).
}

All conditions involving m/z values allow to specify a mass accuracy using
the optional fields \code{TOLERANCEMZ} and \code{TOLERANCEPPM} that define the absolute
and m/z-relative acceptable difference in m/z values. One or both fields can
be attached to a \emph{condition} such as
\code{MS2PREC=100:TOLERANCEMZ=0.1:TOLERANCEPPM=20} to select for example all
MS2 spectra with a precursor m/z equal to 100 accepting a difference of 0.1
and 20 ppm. Note that in contrast to MassQL, the default tolarance and ppm
is 0 for all calls.
}

\section{Filters}{


Filters subset the data within spectra, i.e. select which peaks within
spectra should be retrieved. \code{SpectraQL} does not support filters yet.
}

\examples{

## Read a data file with MS1 and MS2 spectra
library(msdata)
library(Spectra)
fls <- dir(system.file("TripleTOF-SWATH", package = "msdata"),
    full.names = TRUE)
sps_dda <- Spectra(fls[1L])

## Subset to spectra measured between 300 and 400 seconds
query(sps_dda, "QUERY * WHERE RTMIN = 300 AND RTMAX = 400")

## To extract peaks data from MS1 or MS2 spectra use "MS1DATA" or "MS2DATA"
## instead of *. Note also that queries are case-insensitive.
pks <- query(sps_dda, "query ms1data where rtmin = 300 and rtmax = 400")
pks
head(pks[[1L]])

## To select (MS2) spectra with a certain precursor m/z the MS2PREC condition
## can be used. Below we extract all spectra with a precursor m/z of 99.9
## accepting also a difference of 10ppm
query(sps_dda, "QUERY * WHERE MS2PREC = 99.967:TOLERANCEPPM=10")

## It is also possible to specify multiple precursor m/z values:
query(sps_dda, "QUERY * WHERE MS2PREC = (99.967 OR 428.88):TOLERANCEPPM=10")

## To select all MS1 spectra that contain a peak with a certain m/z we can
## use the MS1MZ condition. Below we combine this with an absolute tolerance
## using TOLERANCEMZ.
query(sps_dda, "QUERY * WHERE MS1MZ = 100:TOLERANCEMZ=1")

## Using MS2DATA in combination with MS1MZ will not return any spectra.
query(sps_dda, "QUERY MS2DATA WHERE MS1MZ = 100:TOLERANCEMZ=1")

## In contrast, do select MS2 spectra containing a peak with a certain m/z
## we have to use the condition MS2PROD
query(sps_dda, "QUERY * WHERE MS2PROD = 100:TOLERANCEMZ=1")

## MS2MZ can be used as alternative to MS2PROD
query(sps_dda, "QUERY * WHERE MS2MZ = 100:TOLERANCEMZ=1")
}
\author{
Andrea Vicini, Johannes Rainer
}
